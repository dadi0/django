test case
测试用例：指一个完整的测试流程，包括测试前环境搭建，执行测试代码，测试环境还原
多个测试用例集合在一起就是测试集，测试集可以嵌套测试集
TestLoader用来加载测试用例到测试集中，loadTestsFrom_()方法，是从各个地方查找TestCase，
创建它们的实例，然后add到TestSuite中，再返回一个TestSuite实例
TextTestRunner用来执行测试用例，其中run(test)会执行TestSuite/TestCase中的run(result)方法。
测试结果保存到TextTestResult实例中，包括运行了多少测试用例，成功和失败各有多少等信息

对一个测试用例环境的搭建和销毁是一个fixture
一个class继承了unittest.TestCase就是一个测试用例，如果有很多以test开头的方法，
每个方法在load的时候便会生成一个TestCase实例，如：一个class中有四个test_xxx方法，
最后在load到suite中也会有四个测试用例

流程：写好测试用例，然后由TestLoader加载TestCase到TestSuite，然后由TextTestRunner来运行TestSuite，
运行的结果保存在TextTestResult中，整个过程集中在unittest.main模块中

example:

class Dict(dict):
    def __init__(self, **kw):
        super(Dict, self).__init__(**kw)

    def __getattr__(self, key):
        try:
            return self[key]
        except KeyError:
            raise AttributeError(r"'Dict' object has no attribute '%s'" % key)

    def __setattr__(self, key, value):
        self[key] = value

测试例子：
import unittest
from mydict import Dict


class TestDict(unittest.TestCase):
    def test_init(self):
        d = Dict(a=1, b='test')
        self.assertEqual(d.a, 1)  # 判断d.a是否等于1
        self.assertEqual(d.b, 'test')  # 判断d.b是否等于test
        self.assertTrue(isinstance(d, dict))  # 判断d是否是dict类型

    def test_key(self):
        d = Dict()
        d['key'] = 'value'
        self.assertEqual(d.key, 'value')

    def test_attr(self):
        d = Dict()
        d.key = 'value'
        self.assertTrue('key' in d)
        self.assertEqual(d['key'], 'value')

    def test_keyerror(self):
        d = Dict()
        with self.assertRaises(KeyError):  # 通过d['empty']访问不存在的key时，断言会抛出keyerror
            value = d['empty']

    def test_attrerror(self):
        d = Dict()
        with self.assertRaises(AttributeError):  # 通过d.empty访问不存在的key时，我们期待抛出AttributeError
            value = d.empty


if __name__ == '__main__':
    unittest.main()